<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wanghhhaoo.github.io</id>
    <title>Gridea</title>
    <updated>2021-08-28T14:25:31.162Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wanghhhaoo.github.io"/>
    <link rel="self" href="https://wanghhhaoo.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://wanghhhaoo.github.io/images/avatar.png</logo>
    <icon>https://wanghhhaoo.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Gridea</rights>
    <entry>
        <title type="html"><![CDATA[Vue.js 笔记]]></title>
        <id>https://wanghhhaoo.github.io/post/Vue.js/</id>
        <link href="https://wanghhhaoo.github.io/post/Vue.js/">
        </link>
        <updated>2021-08-28T08:50:29.000Z</updated>
        <content type="html"><![CDATA[<p>小demo</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[数据结构（JavaScript）]]></title>
        <id>https://wanghhhaoo.github.io/post/Data Structure of JavaScript/</id>
        <link href="https://wanghhhaoo.github.io/post/Data Structure of JavaScript/">
        </link>
        <updated>2020-03-30T06:15:00.000Z</updated>
        <content type="html"><![CDATA[<h1 id="stack">Stack</h1>
<pre><code class="language-javascript">function Stack() {
	// 栈中的属性
	let items = [];

	// 栈相关的方法

    // 压栈操作
    Stack.prototype.push = function (element) {
        items.push(element);
    }

    // 出栈操作
	Stack.prototype.pop = function () {
        return items.pop();
    }

    // peek操作
    Stack.prototype.peek = function () {
        return items[items.length - 1];
    }

    // 判断栈中的元素是否为空
    Stack.prototype.isEmpty = function () {
        return items.length == 0;
    }

    // 获取栈中元素的个数
    Stack.prototype.size = function () {
        return items.length;
    }

    // toString方法（将栈中数据打印出来）
    Stack.prototype.toString = function (){
    	let resultString = &quot; &quot;;
    	for(let i = 0; i &lt; items.length; i++){
    		resultString += items[i] + &quot; &quot;;
    	}
    	return resultString;
    }
}
</code></pre>
<h2 id="栈的运用">栈的运用</h2>
<pre><code class="language-javascript">function toBin(num) {
    // 创建一个栈
	var s = new Stack();
    // 定义一个余数
	var remainder;
	while(num &gt; 0){
		remainder = num % 2;
        
        // 令要num / 2之后得到一个整型的值
		num = Math.floor(num / 2);
		s.push(remainder);
	}
    // 取出二进制数
	var binNum = &quot;&quot;;
	while(!s.isEmpty()){
		binNum += s.pop();
	}
	return binNum;
}
</code></pre>
<h1 id="linkedlist">LinkedList</h1>
<pre><code class="language-javascript">    function LinkedList() {
        // 用于保存每个节点的信息
        function Node(element) {
            this.element = element; // 节点的数据域
            this.next = null; // 节点的指针域
        }
        // 链表的属性
        this.length = 0; // 链表的长度
        this.head = null; // 链表的头节点

        // 链表中的方法

        // 向链表尾添加元素
        LinkedList.prototype.append = function(element) {
            // 1.创建一个新的元素节点
            let newNode = new Node(element);
            // 2.判断链表是否为空
            if (this.head === null) // 链表为空
                this.head = newNode;
            else { // 链表不为空
                let current = this.head;
                while (current.next) // 从头节点开始遍历链表
                    current = current.next;
                // 让链表的最后一个元素的next指向新节点
                current.next = newNode;
            }
            // 3.链表长度加一
            this.length++;
        }

        // 向链表任意位置插入元素
        LinkedList.prototype.insert = function(position, element) {
            // 判断是否越界，越界则插入失败
            if (position &lt; 0 || position &gt; this.length)
                return false;

            // 新建一个节点
            let newNode = new Node(element);

            let current = this.head;
            let previous = null;
            let index = 0;

            // 判断插入位置是否是第一个位置
            if (position == 0) {

                /*
                	这里我想了半天，为什么让newNode.next直接指向current，而不是current.next。因为前面定义current时，让current = this.head，所以我以为current是表示头节点，也就是头指针，而非第一个元素。所以我以为current.next才是第一个元素

                	然后我就回去看了一下append()函数的定义，才发现this.head的值本身就是第一个元素，而非第一个元素的指针，因为JS里面是没有指针的
                	也就是说，此时，current，this.head的值都是第一个元素的值，所以此时current.next的值为null
                */
                newNode.next = current;
                this.head = newNode;
            } else {
                while (index++ &lt; position) {
                    previous = current;
                    current = current.next;
                }

                // 这里插入顺序是不能改变的，否则会找不到后面的元素
                newNode.next = current;
                previous.next = newNode;
            }

            // 链表长度加一
            this.length++;
            return true;

        }

        // 链表的删除操作
        LinkedList.prototype.removeAt = function(position) {
            // 判断是否越界，越界则删除失败
            if (position &lt; 0 || position &gt; this.length)
                return false;

            let current = this.head;
            let previous = null;
            let index = 0;

            // 判断删除的节点是否为第一个节点
            if (position == 0)
                this.head = current.next;
            else {
                while (index++ &lt; position) {
                    previous = current;
                    current = current.next;
                }
                previous.next = current.next;
            }

            // 链表长度减一
            this.length--;

            //返回被删除的元素值
            return current.element;

        }

        // 链表的查找操作
        LinkedList.prototype.search = function(element) {
            let current = this.head;
            let index = 0;

            // 查找元素位置，并返回索引值
            while (current) {
                if (current.element === element)
                    return index;
                index++;
                current = current.next;
            }

            // 若查找失败，则返回-1
            return -1;
        }

        // 通过查找操作，可以通过元素值来进行删除操作
        LinkedList.prototype.removeNd = function(element) {
            let index = this.search(element);
            return this.removeAt(index);
        }

        // 获取第一个元素的值
        LinkedList.prototype.getHead = function() {
            return this.head.element;
        }

        // 判断链表是否为空
        LinkedLint.prototype.isEmpty = function() {
            return this.length == 0;
        }
        
        // 链表的toString方法
        LinkedList.prototype.toString = function() {
            let current = this.head;
            let listString = &quot;&quot;;

            // 遍历链表
            while (current) {
                listString += &quot;, &quot; + current.element;
                current = current.next;
            }
            // 返回listString的值
            return listString.slice(2);
        }
    }
</code></pre>
<h1 id="queue">Queue</h1>
<pre><code class="language-javascript">    function Queue() {
        var items = [];

        //队列的操作方法

        //进队列
        Queue.prototype.enQueue = function(element) {
            items.push(element);
        }

        //出队列
        Queue.prototype.deQueue = function() {
            return items.shift();
        }

        //查看队首元素
        Queue.prototype.front = function() {
            return items[0];
        }

        //判断队列是否为空
        Queue.prototype.isEmpty = function() {
            return items.length == 0;
        }

        //查看队列中的元素个数
        Queue.prototype.size = function() {
            return items.length;
        }
    }


    // 封装优先级队列
    function PriorityQueue() {
        var items = []

        // 封装一个新的构造函数, 用于保存元素和元素的优先级
        function QueueElement(element, priority) {
            this.element = element
            this.priority = priority
        }

        // 添加元素的方法
        this.enQueue = function(element, priority) {
            // 1.根据传入的元素, 创建新的QueueElement
            var queueElement = new QueueElement(element, priority)

            // 2.获取传入元素应该在正确的位置
            if (this.isEmpty()) {
                items.push(queueElement)
            } else {
                var added = false
                for (var i = 0; i &lt; items.length; i++) {
                    // 注意: 我们这里是数字越小, 优先级越高
                    if (queueElement.priority &lt; items[i].priority) {
                        items.splice(i, 0, queueElement)
                        added = true
                        break
                    }
                }

                // 遍历完所有的元素, 优先级都大于新插入的元素时, 就插入到最后
                if (!added) {
                    items.push(queueElement)
                }
            }
        }

        // 删除元素的方法
        this.deQueue = function() {
            return items.shift()
        }

        // 获取前端的元素
        this.front = function() {
            return items[0]
        }

        // 查看元素是否为空
        this.isEmpty = function() {
            return items.length == 0
        }

        // 获取元素的个数
        this.size = function() {
            return items.length
        }
    }


    function passGame(nameList, num) {
        var queue = new Queue();

        //将参加游戏的人名加入队列之中
        for (var i = 0; i &lt; nameList.length; i++) {
            queue.enQueue(nameList[i]);
        }

        while (queue.size() &gt; 1) {
            //每次循环将队首的元素放到队尾（循环队列）
            for (var i = 0; i &lt; num; i++) {
                queue.enQueue(queue.deQueue());
            }
            //循环结束，删除队首元素，则这个玩家被淘汰
            queue.deQueue();
        }

        //当队列中只有一个元素时，退出while循环，输出胜利者姓名
        var winner = &quot;the winner is &quot;;
        return winner += queue.deQueue();
    }
</code></pre>
<h1 id="binarysearchtree">BinarySearchTree</h1>
<pre><code class="language-javascript">    function BinarySearchTree() {
        // 节点构造函数
        function Node(key) {
            this.key = key;
            this.left = null;
            this.right = null;
        }
        // 保存根的属性
        this.root = null;


        // 插入节点（根节点或非根节点）
        BinarySearchTree.prototype.Insert = function(key) {
            let newNode = new Node(key);

            // 判断是否有根节点
            if (!this.root)
                this.root = newNode;
            else
                this.InsertNode(this.root, newNode);
        }
        // 插入非根节点
        BinarySearchTree.prototype.InsertNode = function(node, newNode) {
            // 当插入的值要比node的值小时，插入它的左子树
            if (newNode.key &lt; node.key) {
                // 判断左子树是否为空，若为空则直接插入，若不为空则在它的左子树上再递归一遍
                if (!node.left)
                    node.left = newNode;
                else
                    this.InsertNode(node.left, newNode);
            }
            // 否则插入它的右子树
            else if (newNode.key &gt; node.key) {
                // 操作同上
                if (!node.right)
                    node.right = newNode;
                else
                    this.InsertNode(node.right, newNode);
            }
        }

        // 先序遍历
        BinarySearchTree.prototype.PreOrder = function() {
            this.PreOrderNode(this.root);

        }
        BinarySearchTree.prototype.PreOrderNode = function(node) {
            if (node) {
                console.log(node.key);
                this.PreOrderNode(node.left);
                this.PreOrderNode(node.right);
            }
        }
        // 中序遍历
        BinarySearchTree.prototype.InOrder = function() {
            this.InOrderNode(this.root);

        }
        BinarySearchTree.prototype.InOrderNode = function(node) {
            if (node) {
                console.log(node.key);
                this.InOrderNode(node.left);
                this.InOrderNode(node.right);
            }
        }
        // 后序遍历
        BinarySearchTree.prototype.PostOrder = function() {
            this.PostOrderNode(this.root);

        }
        BinarySearchTree.prototype.PostOrderNode = function(node) {
            if (node) {
                console.log(node.key);
                this.PostOrderNode(node.left);
                this.PostOrderNode(node.right);
            }
        }

        // 查找最小值
        BinarySearchTree.prototype.Min = function() {
            let node = this.root;
            while (node.left) {
                node = node.left;
            }
            return node.key;
        }
        // 查找最大值
        BinarySearchTree.prototype.Max = function() {
            let node = this.root;
            while (node.right) {
                node = node.right;
            }
            return node.key;
        }

        //查找（递归）
        // BinarySearchTree.prototype.Search = function (key) {
        // 	return this.SearchNode(this.root, key);
        // }
        // BinarySearchTree.prototype.SearchNode = function (node, key) {
        // 	// 判断树是否为空，为空则返回false
        // 	if (!node)
        // 		return false;
        // 	else {
        // 		// 寻找的值比当前节点的值小，则查看它的左子树
        // 		if (node.key &gt; key)
        // 			return this.SearchNode(node.left, key);
        // 		// 寻找的值比当前节点的值大，查看右子树
        // 		else if (node.key &lt; key)
        // 			return this.SearchNode(node.right, key);
        // 		else
        // 			return true;
        // 	}
        // }

        // 查找（循环）
        BinarySearchTree.prototype.Search = function(key) {
            let node = this.root;
            while (node) {
                if (node.key &gt; key)
                    node = node.left;
                else if (node.key &lt; key)
                    node = node.right;
                else
                    return true;
            }
            return false;
        }

        // 删除节点
        BinarySearchTree.prototype.remove = function(key) {
            let current = this.root; // 当前访问的节点，也表示要删除的节点
            let parent = this.root; // 当前节点的双亲节点
            let isLeftChild = true; // 判断要删除的节点是否为双亲节点的左子树

            // 查找节点
            while (current.key !== key) {
                parent = current;
                if (current.key &gt; key) {
                    isLeftChild = true;
                    current = current.left;
                } else {
                    isLeftChild = false;
                    current = current.right;
                }

                // 若current没有子节点了，说明没有找到要删除的节点
                if (!current)
                    return false;
            }

            // 删除叶子节点
            if (!current.left &amp;&amp; !current.right) {
                if (current == this.root)
                    this.root = null;
                else if (isLeftChild)
                    parent.left = null;
                else
                    parent.right = null;
            }

            // 删除一个拥有一个子树的节点
            // 直接让要删除的节点的子树与双亲节点相连
            else if (!current.right) {
                if (current == this.root)
                    this.root = current.left;
                else if (isLeftChild)
                    parent.left = current.left;
                else
                    parent.right = current.left;
            } else if (!current.left) {
                if (current == this.root)
                    this.root = current.right;
                else if (isLeftChild)
                    parent.left = current.right;
                else
                    parent.right = current.right;
            }

            // 删除拥有两个子树的节点,寻找删除节点的前驱节点或者后继节点
            else {
                let successor = this.getSuccessor(current);
                if (current == this.root)
                    this.root = successor;
                else if (isLeftChild)
                    parent.left = successor;
                else
                    parent.right = successor;

                // 将删除的节点的左子树的值赋给successor
                successor.left = current.left;
            }

        }

        // 寻找要删除的节点的后继节点
        BinarySearchTree.prototype.getSuccessor = function(delNode) {
            // 从要删除的节点开始寻找
            let successorParent = delNode;
            let successor = delNode;
            let current = delNode.right; // 从右子树开始寻找
            // 寻找后继节点就是寻找右子树中最小的节点
            while (current) {
                successorParent = successor;
                successor = current;
                current = current.left;
            }

            // 当要删除的节点的右子树中最小的节点还有右子树的时候
            if (successor != delNode.right) {
                successorParent.left = successor.right;
                successor.right = delNode.right;
            }
            return successor;
        }
    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[JavaScript 笔记]]></title>
        <id>https://wanghhhaoo.github.io/post/JavaScript/</id>
        <link href="https://wanghhhaoo.github.io/post/JavaScript/">
        </link>
        <updated>2020-01-13T11:18:59.000Z</updated>
        <content type="html"><![CDATA[<h1 id="执行上下文的分析思路">执行上下文的分析思路</h1>
<pre><code class="language-javascript">a = 100;
function demo(e) {
	function e() {}
	arguments[0] = 2;
	document.write(e + &quot; &quot;);
	if(a) {
		var b = 123;
		function c() {}
	}
	var c;
	a = 10;
	var a;
	document.write(b + &quot; &quot;);
	f = 123;
	document.write(c + &quot; &quot;);
	document.write(a + &quot; &quot;);
}
var a;
demo(1);
document.write(a + &quot; &quot;);
document.write(f + &quot; &quot;);
</code></pre>
<p>首先AO是这样的</p>
<pre><code>A0{
	e : undefined;
	b : undefined;
	c : undefined;
	a : undefined;
}
</code></pre>
<p>然后变成这样</p>
<pre><code>AO{
	e : function e() {};
	b : undefined; (因为a的值此时还是undefined，不执行a中的内容，所以b的值为undefined)
	c : function c() {}; (当if中能够定义函数时c是function () {}，此时实际上c是undefined)
	a : undefined;
}
</code></pre>
<p>因为arguments[0] = 2，且arguments[0]与e相映射，arguments[0]变则e变，e变则arguments[0]变，所以e的值变成了2</p>
<pre><code>AO{
	e : 2;
	b : undefined; (因为a的值此时还是undefined，不执行a中的内容，所以b的值为undefined)
	c : function c() {}; (当if中能够定义函数时c是function () {}，此时实际上c是undefined)
	a : 10;
}
</code></pre>
<p>因为f未被定义，所以要去全局变量GO中寻找</p>
<pre><code>GO{
	a = 100; (这个a是全局变量，和上面的a不一样)
	f = 123;
}
</code></pre>
<p>上面的代码的执行结果：2 undefined undefined 10 100 123</p>
<h1 id="dom操作">DOM操作</h1>
<!--document代表了整个文档-->
<ul>
<li>
<p>增</p>
<ul>
<li>
<p>document.creatElement()<!--创建元素节点--></p>
</li>
<li>
<p>document.creatTextNode()<!--创建文本节点--></p>
</li>
<li>
<p>document.creatComment()<!--创建注释节点--></p>
</li>
<li>
<p>document.creatDocumentFragment()<!--创建文档碎片节点--></p>
</li>
</ul>
</li>
<li>
<p>删</p>
<ul>
<li>父级元素.removeChild()</li>
<li>元素.remove()</li>
</ul>
</li>
<li>
<p>改（替换）</p>
<ul>
<li>父级元素.replaceChild(new, origin)</li>
</ul>
</li>
<li>
<p>查</p>
<ul>
<li>
<p>document.getElementById() <!--元素id--></p>
</li>
<li>
<p>document.getElementsByTagName() <!--标签名，会形成一个类数组--></p>
</li>
<li>
<p>document.getElementByName() <!--需注意，只有部分标签name可以生效（表单，表单元素，img, iframe）--></p>
</li>
<li>
<p>document.getElementsByClassName() <!--类名，会形成一个类数组--></p>
</li>
<li>
<p>document.querySelector() <!--css选择器--></p>
</li>
<li>
<p>document.querySelectorAll() <!--css选择器--></p>
<!--querySelector()和querySelectorAll()没有实时性-->
</li>
</ul>
</li>
<li>
<p>插</p>
<ul>
<li>父级元素.appendChild()</li>
<li>父级元素.insertBefore(a, b)</li>
</ul>
<!--任何元素节点都有appendChild()方法，剪切操作-->
</li>
</ul>
<h2 id="节点">节点</h2>
<h3 id="节点类型">节点类型</h3>
<ul>
<li>元素节点 -- 1</li>
<li>属性节点 -- 2</li>
<li>文本节点 -- 3</li>
<li>注释节点 -- 8</li>
<li>document -- 9</li>
<li>DocumentFragment -- 11</li>
</ul>
<!--获取节点类型：nodeType（返回后面的数字）-->
<h3 id="节点的四个属性">节点的四个属性</h3>
<ul>
<li>nodeName <!--元素的标签名，以大写形式表示，只读--></li>
<li>nodeValue <!--Text节点或Comment节点的文本内容，可读写--></li>
<li>nodeType <!--该节点的类型，只读--></li>
<li>attributes <!--Element节点的属性结合--></li>
</ul>
<p>节点的一个方法：Node.hasChildNodes()</p>
<h2 id="dom树">DOM树</h2>
<figure data-type="image" tabindex="1"><img src="https://wanghhhaoo.github.io/post-images/1578914381923.png" alt="" loading="lazy"></figure>
<h2 id="遍历节点树">遍历节点树</h2>
<ul>
<li>parentNode --&gt; 父节点</li>
<li>childNodes --&gt; 子节点们</li>
<li>firstChild --&gt; 第一个子节点</li>
<li>lastChild --&gt; 最后一个子节点</li>
<li>previousSibling --&gt; 前一个兄弟节点</li>
<li>nextSibling --&gt; 后一个兄弟节点</li>
</ul>
<p><strong>继承关系</strong></p>
<p>document --&gt; HTMLDocument.prototype --&gt; Document.prototype</p>
<h2 id="注意">注意</h2>
<p>​		使用document.getElementsByClassName(&quot;&quot;)和document.getElementsByTagName(&quot;&quot;)的时候，会形成一个类数组，如果要调用里面的一个元素，调用方法跟数组类似，如</p>
<pre><code class="language-html">&lt;div class=&quot;content&quot;&gt;
	&lt;div class=&quot;middle&quot;&gt;
		&lt;div class=&quot;inner-middl	SSe&quot;&gt;&lt;/div&gt;
	&lt;/div&gt;
	&lt;div class=&quot;middle&quot;&gt;&lt;/div&gt;
	&lt;div class=&quot;left&quot;&gt;&lt;/div&gt;
	&lt;div class=&quot;right&quot;&gt;&lt;/div&gt;
&lt;/div&gt;
</code></pre>
<pre><code class="language-javascript">var div = document.getElementsByTagName(&quot;div&quot;)[0];
var content = document.getElementsByClassName(&quot;content&quot;)[0];
var middle = document.getElementsByClassName(&quot;middle&quot;)[0];
</code></pre>
<figure data-type="image" tabindex="2"><img src="https://wanghhhaoo.github.io/post-images/1578914428424.png" alt="" loading="lazy"></figure>
<h1 id="日期对象">日期对象</h1>
<p>定义一个日期对象的方法：</p>
<pre><code class="language-javascript">var date = new Date();
</code></pre>
<h1 id="jquery">jQuery</h1>
<p>jQuery中文文档：https://www.jquery123.com</p>
<p>W3C的jQuery文档：https://www.w3school.com.cn/jquery/index.asp</p>
<p>菜鸟教程的jQuery文档：https://www.runoob.com/jquery/jquery-tutorial.html</p>
<p><strong>引用方式</strong>，<!--以下是引用本地文件--></p>
<pre><code class="language-javascript">&lt;script type=&quot;text/javascript&quot; src=&quot;jquery.js&quot;&gt;&lt;/script&gt;
</code></pre>
<h2 id="jquery库的三种地址">jQuery库的三种地址</h2>
<ul>
<li>下载jQuery本地文件的链接：https://jquery.com/download</li>
<li>bootCDN：https://www.bootcdn.cn/jquery</li>
<li>Google的CDN：https://developers.google.com/speed/libraries</li>
<li>Microsoft的CDN：https://docs.microsoft.com/en-us/aspnet/ajax/cdn/overview</li>
</ul>
<h2 id="注意-2">注意</h2>
<p>所有 jQuery 函数位于一个 document的ready 函数（文档就绪函数）中：</p>
<pre><code class="language-javascript">$(document).ready(function(){
	--- jQuery functions go here ----
});
</code></pre>
<p>这是为了防止文档在完全加载（就绪）之前运行 jQuery 代码。</p>
<p>如果在文档没有完全加载之前就运行函数，操作可能失败。下面是两个具体的例子：</p>
<ul>
<li>试图隐藏一个不存在的元素</li>
<li>获得未完全加载的图像的大小</li>
</ul>
<h1 id="ajax">Ajax</h1>
<p>W3C的Ajax文档：https://www.w3school.com.cn/ajax/index.asp</p>
<p>菜鸟教程的Ajax文档：https://www.runoob.com/ajax/ajax-tutorial.html</p>
<p>注意：**运行Ajax文件要在服务器上面运行：</p>
<ol>
<li>打开xampp，打开apache</li>
<li>访问地址：localhost/...（相对路径）</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSS 笔记]]></title>
        <id>https://wanghhhaoo.github.io/post/CSS/</id>
        <link href="https://wanghhhaoo.github.io/post/CSS/">
        </link>
        <updated>2020-01-13T11:12:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="编译手段">编译手段</h1>
<p><strong>先定义功能，后选配功能（先写CSS，后写HTML）</strong></p>
<h1 id="字体颜色">字体颜色</h1>
<ul>
<li><strong>土鳖式</strong></li>
</ul>
<p>​		纯英文单词<br>
​		transparent(透明色)</p>
<ul>
<li><strong>颜色代码</strong></li>
</ul>
<table>
<thead>
<tr>
<th>r</th>
<th>g</th>
<th>b</th>
</tr>
</thead>
<tbody>
<tr>
<td>00 - ff</td>
<td>00 - ff</td>
<td>00 - ff</td>
</tr>
</tbody>
</table>
<!-- 00-ff：代表颜色饱和程度(十六进制数) -->
<!-- 表示红色的饱和度为ff，绿色的饱和度为44，蓝色的饱和度为00 -->
<p>color: #000000; (黑色)</p>
<p>color: #ffffff; (白色)</p>
<p>color: #ff4400 / #f40; (淘宝红)</p>
<p>**简写问题：**如#ff4400可以简写成#f40 (每两位都是重复的才能简写)</p>
<p><strong>额外拓展</strong></p>
<table>
<thead>
<tr>
<th>美术三原色</th>
<th>光学三原色</th>
</tr>
</thead>
<tbody>
<tr>
<td>红 黄 蓝</td>
<td>红 绿 蓝</td>
</tr>
</tbody>
</table>
<ul>
<li><strong>颜色函数</strong></li>
</ul>
<p>​	rgb(255,255,255)<br>
​	rgba(255,255,255,0.5)，<strong>这个a表示透明度</strong><br>
​	<!-- 括号里面的每一个数的范围都是0-255(十进制) --></p>
<h1 id="盒模型">盒模型</h1>
<p><strong>正常盒模型的宽度：</strong>（margin + border + padding + (content = width + height)）</p>
<p><strong>几大部分：</strong></p>
<ol>
<li>盒子壁：border</li>
<li>内边距：padding</li>
<li>盒子内容：width + height</li>
<li>内容区：content</li>
<li>元素：element</li>
</ol>
<p><strong>盒子的实际可视大小</strong></p>
<p>例如：</p>
<pre><code class="language-css">div{
	width: 100px;
	height: 100px;
	border: 10px;
	padding: 10px 20px 30px;
	margin: 10px 20px;
}
</code></pre>
<p>realWidth：2 * 10px（border） + 100px（width） + 10px（padding） + 30px（padding） = 160px</p>
<p>realHeight：2 * 10px（border） + 100px（height） + 2 * 20px（padding） = 160px</p>
<h2 id="margin塌陷问题">margin塌陷问题</h2>
<h3 id="原理">原理</h3>
<p>父子嵌套的垂直方向的margin，是两者结合的，取两者中的最大值</p>
<h3 id="解决方法">解决方法</h3>
<ol>
<li>
<p>（非专业，不推荐）给父类选择器加一个border-top</p>
</li>
<li>
<p>触发一个盒子的bfc（改变了盒子里面的渲染规则）</p>
<ul>
<li>
<p>position :  absolution;</p>
</li>
<li>
<p>display :  inline-block;</p>
</li>
<li>
<p>float :  left / right;</p>
</li>
<li>
<p>overflow :  hidden;（隐藏溢出盒子的部分）</p>
</li>
</ul>
<!--margin合并问题：允许存在，可以不解决-->
</li>
</ol>
<h1 id="文本操作">文本操作</h1>
<table>
<thead>
<tr>
<th>属性</th>
<th>值</th>
<th>例子</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>text-indent</strong>（首行缩进）</td>
<td>单位：em<br/>首行缩进两字符：2em<br/>1em = 1 font-size = 16px</td>
<td></td>
</tr>
<tr>
<td><strong>line-height</strong>（行间距）</td>
<td></td>
<td>文本纵向居中的方法：<strong>line-height = height</strong></td>
</tr>
<tr>
<td><strong>text-align</strong>（对齐方式）</td>
<td>left<br/>right<br/>center</td>
<td>左对齐<br/>右对齐<br/>横向居中</td>
</tr>
<tr>
<td><strong>text-decoration</strong></td>
<td>line-through<br/>underline<br/>overline<br/>none</td>
<td>中划线<br/>下划线<br/>上划线<br/>没有线，去掉线</td>
</tr>
</tbody>
</table>
<h2 id="文字溢出部分用打点展示">文字溢出部分用打点展示</h2>
<h3 id="单行文本">单行文本</h3>
<pre><code class="language-html">元素{
	white-space : nowrp;（不换行）
	overflow : hidden;（溢出部分隐藏）
	text-overflow : ellipsis;（溢出部分用...展示）
}
</code></pre>
<h3 id="多行文本">多行文本</h3>
<p>​		用...展示：估算容器的大小，手动打出来</p>
<p>​		多行截断：让height等于几倍的line-height，容器就会展示出来几行文字，溢出的部分用overflow : hidden；隐藏即可</p>
<h1 id="元素类型">元素类型</h1>
<p>**文本类元素特点：**inline、inline-block</p>
<p>​		文本分隔符(无论元素之间有多少空格或者换行符，显示出来的都只有有个文本分隔符，若无空格或换行符，则无分隔符)</p>
<p>**文本类元素之间对齐方式：**底对齐<br>
当文本类元素里面存在文字，则外面的文字与元素里面的文字底对齐，而不是和元素底对齐</p>
<p>​		调整对齐线用vertical-align: ...; 也可以用单词，如middle</p>
<table>
<thead>
<tr>
<th>类型</th>
<th>例子</th>
<th>特点</th>
</tr>
</thead>
<tbody>
<tr>
<td>行级元素（inline）</td>
<td>除了p标签之外的所有文本级标签<br/>如：span, strong, em, a, del</td>
<td>1. 内容决定元素所占位置<br/>2. 不可以通过css改变宽高<br/>3. 凡是带有inline,inline-block的元素，都有文本类元素特性，每个元素显示出来之后，中间都有4px的间隔(解决方法：去掉每个元素中间的换行和空格)</td>
</tr>
<tr>
<td>块级元素（block）</td>
<td>所有容器级元素，以及p标签<br/>如：div, p, ul, li, ol, form, address</td>
<td>1. 独占一行<br/>2. 可以通过css改变宽高</td>
</tr>
<tr>
<td>行级块元素（inline-block）</td>
<td>如：img</td>
<td>1. 内容决定大小<br/>2. 可以改宽高</td>
</tr>
</tbody>
</table>
<!--以上特性可以在css中通过选择器中的display的值来改变-->
<h1 id="权重">权重</h1>
<table>
<thead>
<tr>
<th>选择器</th>
<th>案例</th>
<th>权重值</th>
</tr>
</thead>
<tbody>
<tr>
<td>!important</td>
<td>!important</td>
<td>Infinity</td>
</tr>
<tr>
<td>行间样式</td>
<td>style=&quot;..&quot;</td>
<td>1000</td>
</tr>
<tr>
<td>ID</td>
<td>#id</td>
<td>100</td>
</tr>
<tr>
<td>class</td>
<td>.class</td>
<td>10</td>
</tr>
<tr>
<td>属性</td>
<td>[type='text']</td>
<td>10</td>
</tr>
<tr>
<td>伪类</td>
<td>:hover</td>
<td>10</td>
</tr>
<tr>
<td>标签</td>
<td>p</td>
<td>1</td>
</tr>
<tr>
<td>伪元素</td>
<td>::first-line</td>
<td>1</td>
</tr>
<tr>
<td>相邻选择器、子代选择器、通配符</td>
<td>* &gt; +</td>
<td>0</td>
</tr>
</tbody>
</table>
<h1 id="背景图片">背景图片</h1>
<pre><code class="language-html">元素{
	background-image : url(&quot;图片（相对 / 绝对）地址&quot;);
	background-size : 宽 高;
}
</code></pre>
<p><strong>若一张图不能铺满容器则重复出现</strong></p>
<ol>
<li>使其不重复出现：background-repeat : no-repeat;</li>
<li>使其在x轴重复：background-repeat : repeat-x;</li>
<li>使其在y轴重复：background-repeat : repeat-y;</li>
</ol>
<p><strong>改变背景图片的位置</strong></p>
<p>​		background-position : x y;（x，y为图片左上角的位置）</p>
<p>​		x，y可以改用top / right / left / bottom / center（用两个center为居中），也可以用百分数表示（50% 50%与两个center作用相同）</p>
<p><strong>图片替代文字的操作</strong></p>
<p>​		当去掉css之后，网页依旧可以使用的方法（用于网速较慢的时候）</p>
<ol>
<li>
<pre><code class="language-html">元素{
	text-indent : 图片容器的宽;（首行缩进）
	white-space : nowrap;
	overflow : hidden;
}
</code></pre>
</li>
<li>
<p>将height的值改为0，让padding-top的值等于height之前的值，再加上overflow : hidden;</p>
</li>
</ol>
<h1 id="注意">注意</h1>
<ul>
<li>行级元素只能嵌套行级元素</li>
<li>块级元素可以嵌套任何元素</li>
<li>p标签里面不能嵌套div，否者会被div分成两个p标签</li>
<li>a标签中不能嵌套a标签</li>
</ul>
<h1 id="css-3">css 3</h1>
<p>W3C的css3文档：https://www.w3school.com.cn/css3/index.asp</p>
<p>菜鸟教程的css3文档：https://www.runoob.com/css3/css3-tutorial.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[英语学习心得]]></title>
        <id>https://wanghhhaoo.github.io/post/Thoughts of English Learning/</id>
        <link href="https://wanghhhaoo.github.io/post/Thoughts of English Learning/">
        </link>
        <updated>2020-01-13T10:42:29.000Z</updated>
        <summary type="html"><![CDATA[<p><strong>四六级做题技巧</strong><br>
备考顺序：</p>
<ul>
<li>
<p><strong>备考顺序</strong>：单词 → 听力 → 阅读 → 翻译 → 写作</p>
</li>
<li>
<p><strong>做题顺序</strong>：写作 → 听力 → 仔细阅读 → 信息匹配 → 翻译 → 选词填空</p>
</li>
<li>
<p><strong>核心</strong>：真题（真题宝贵不要浪费）+ 技巧（各类题型都有技巧）</p>
</li>
</ul>
]]></summary>
        <content type="html"><![CDATA[<p><strong>四六级做题技巧</strong><br>
备考顺序：</p>
<ul>
<li>
<p><strong>备考顺序</strong>：单词 → 听力 → 阅读 → 翻译 → 写作</p>
</li>
<li>
<p><strong>做题顺序</strong>：写作 → 听力 → 仔细阅读 → 信息匹配 → 翻译 → 选词填空</p>
</li>
<li>
<p><strong>核心</strong>：真题（真题宝贵不要浪费）+ 技巧（各类题型都有技巧）</p>
</li>
</ul>
<!--more-->
<p>多做真题！</p>
<p>多做真题！</p>
<p>多做真题！</p>
<p>单词一定得背！！！</p>
<!--我自己在网上COPY的别人的，但是根据自己的理解和水平，觉得挺有道理的-->
<p>学了这么久的英语，现在才意识到了单词对英语的重要性，如果没有一定的词汇量，做题就如同以下这样：<br>
<img src="https://wanghhhaoo.github.io/post-images/1578912871360.jpg" alt="" loading="lazy"></p>
<p>就算自己的语法很好，但是一句话只能看懂几个单词，也没用。</p>
<p>所以我觉得<strong>词汇量是学英语的核心中的核心</strong>。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://wanghhhaoo.github.io/post/hello-gridea/</id>
        <link href="https://wanghhhaoo.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>